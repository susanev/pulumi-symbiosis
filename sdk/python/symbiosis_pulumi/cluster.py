# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 is_highly_available: Optional[pulumi.Input[bool]] = None,
                 kube_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[bool] is_highly_available: When set to true it will deploy a highly available control plane with multiple replicas for redundancy.
        :param pulumi.Input[str] kube_version: Kubernetes version, see symbiosis.host for valid values or "latest" for the most recent supported version.
        :param pulumi.Input[str] name: Cluster name. Changing the name forces re-creation.
        """
        pulumi.set(__self__, "region", region)
        if is_highly_available is not None:
            pulumi.set(__self__, "is_highly_available", is_highly_available)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="isHighlyAvailable")
    def is_highly_available(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true it will deploy a highly available control plane with multiple replicas for redundancy.
        """
        return pulumi.get(self, "is_highly_available")

    @is_highly_available.setter
    def is_highly_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_highly_available", value)

    @property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes version, see symbiosis.host for valid values or "latest" for the most recent supported version.
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster name. Changing the name forces re-creation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 ca_certificate: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 is_highly_available: Optional[pulumi.Input[bool]] = None,
                 kube_version: Optional[pulumi.Input[str]] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[str] endpoint: Cluster API server endpoint
        :param pulumi.Input[bool] is_highly_available: When set to true it will deploy a highly available control plane with multiple replicas for redundancy.
        :param pulumi.Input[str] kube_version: Kubernetes version, see symbiosis.host for valid values or "latest" for the most recent supported version.
        :param pulumi.Input[str] kubeconfig: The raw kubeconfig file.
        :param pulumi.Input[str] name: Cluster name. Changing the name forces re-creation.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if is_highly_available is not None:
            pulumi.set(__self__, "is_highly_available", is_highly_available)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if kubeconfig is not None:
            pulumi.set(__self__, "kubeconfig", kubeconfig)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster API server endpoint
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="isHighlyAvailable")
    def is_highly_available(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true it will deploy a highly available control plane with multiple replicas for redundancy.
        """
        return pulumi.get(self, "is_highly_available")

    @is_highly_available.setter
    def is_highly_available(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_highly_available", value)

    @property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes version, see symbiosis.host for valid values or "latest" for the most recent supported version.
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_version", value)

    @property
    @pulumi.getter
    def kubeconfig(self) -> Optional[pulumi.Input[str]]:
        """
        The raw kubeconfig file.
        """
        return pulumi.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubeconfig", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster name. Changing the name forces re-creation.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_highly_available: Optional[pulumi.Input[bool]] = None,
                 kube_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages Kubernetes clusters.

        ## Example Usage

        ```python
        import pulumi
        import symbiosis_pulumi as symbiosis

        example = symbiosis.Cluster("example", region="germany-1")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] is_highly_available: When set to true it will deploy a highly available control plane with multiple replicas for redundancy.
        :param pulumi.Input[str] kube_version: Kubernetes version, see symbiosis.host for valid values or "latest" for the most recent supported version.
        :param pulumi.Input[str] name: Cluster name. Changing the name forces re-creation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Kubernetes clusters.

        ## Example Usage

        ```python
        import pulumi
        import symbiosis_pulumi as symbiosis

        example = symbiosis.Cluster("example", region="germany-1")
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_highly_available: Optional[pulumi.Input[bool]] = None,
                 kube_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["is_highly_available"] = is_highly_available
            __props__.__dict__["kube_version"] = kube_version
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["ca_certificate"] = None
            __props__.__dict__["certificate"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["kubeconfig"] = None
            __props__.__dict__["private_key"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["caCertificate", "certificate", "kubeconfig", "privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Cluster, __self__).__init__(
            'symbiosis:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ca_certificate: Optional[pulumi.Input[str]] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            is_highly_available: Optional[pulumi.Input[bool]] = None,
            kube_version: Optional[pulumi.Input[str]] = None,
            kubeconfig: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint: Cluster API server endpoint
        :param pulumi.Input[bool] is_highly_available: When set to true it will deploy a highly available control plane with multiple replicas for redundancy.
        :param pulumi.Input[str] kube_version: Kubernetes version, see symbiosis.host for valid values or "latest" for the most recent supported version.
        :param pulumi.Input[str] kubeconfig: The raw kubeconfig file.
        :param pulumi.Input[str] name: Cluster name. Changing the name forces re-creation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["ca_certificate"] = ca_certificate
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["is_highly_available"] = is_highly_available
        __props__.__dict__["kube_version"] = kube_version
        __props__.__dict__["kubeconfig"] = kubeconfig
        __props__.__dict__["name"] = name
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["region"] = region
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        Cluster API server endpoint
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="isHighlyAvailable")
    def is_highly_available(self) -> pulumi.Output[Optional[bool]]:
        """
        When set to true it will deploy a highly available control plane with multiple replicas for redundancy.
        """
        return pulumi.get(self, "is_highly_available")

    @property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> pulumi.Output[Optional[str]]:
        """
        Kubernetes version, see symbiosis.host for valid values or "latest" for the most recent supported version.
        """
        return pulumi.get(self, "kube_version")

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Output[str]:
        """
        The raw kubeconfig file.
        """
        return pulumi.get(self, "kubeconfig")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Cluster name. Changing the name forces re-creation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

