// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package symbiosis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates node pools for Kubernetes clusters in Symbiosis.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/symbiosis-cloud/pulumi-symbiosis/sdk/go/symbiosis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleCluster, err := symbiosis.NewCluster(ctx, "exampleCluster", &symbiosis.ClusterArgs{
//				Region: pulumi.String("germany-1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = symbiosis.NewNodePool(ctx, "exampleNodePool", &symbiosis.NodePoolArgs{
//				Cluster:  exampleCluster.Name,
//				NodeType: pulumi.String("general-1"),
//				Quantity: pulumi.Int(6),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NodePool struct {
	pulumi.CustomResourceState

	Autoscaling NodePoolAutoscalingPtrOutput `pulumi:"autoscaling"`
	// Name of cluster to create node pool in.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// Node labels to be applied to the nodes
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of node pool
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of nodes for this specific pool, see docs.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Desired number of nodes for specific pool.
	Quantity pulumi.IntOutput `pulumi:"quantity"`
	// Node taints to be applied to the nodes
	Taints NodePoolTaintArrayOutput `pulumi:"taints"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.Quantity == nil {
		return nil, errors.New("invalid value for required argument 'Quantity'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NodePool
	err := ctx.RegisterResource("symbiosis:index/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("symbiosis:index/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	Autoscaling *NodePoolAutoscaling `pulumi:"autoscaling"`
	// Name of cluster to create node pool in.
	Cluster *string `pulumi:"cluster"`
	// Node labels to be applied to the nodes
	Labels map[string]string `pulumi:"labels"`
	// Name of node pool
	Name *string `pulumi:"name"`
	// Type of nodes for this specific pool, see docs.
	NodeType *string `pulumi:"nodeType"`
	// Desired number of nodes for specific pool.
	Quantity *int `pulumi:"quantity"`
	// Node taints to be applied to the nodes
	Taints []NodePoolTaint `pulumi:"taints"`
}

type NodePoolState struct {
	Autoscaling NodePoolAutoscalingPtrInput
	// Name of cluster to create node pool in.
	Cluster pulumi.StringPtrInput
	// Node labels to be applied to the nodes
	Labels pulumi.StringMapInput
	// Name of node pool
	Name pulumi.StringPtrInput
	// Type of nodes for this specific pool, see docs.
	NodeType pulumi.StringPtrInput
	// Desired number of nodes for specific pool.
	Quantity pulumi.IntPtrInput
	// Node taints to be applied to the nodes
	Taints NodePoolTaintArrayInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	Autoscaling *NodePoolAutoscaling `pulumi:"autoscaling"`
	// Name of cluster to create node pool in.
	Cluster string `pulumi:"cluster"`
	// Node labels to be applied to the nodes
	Labels map[string]string `pulumi:"labels"`
	// Name of node pool
	Name *string `pulumi:"name"`
	// Type of nodes for this specific pool, see docs.
	NodeType string `pulumi:"nodeType"`
	// Desired number of nodes for specific pool.
	Quantity int `pulumi:"quantity"`
	// Node taints to be applied to the nodes
	Taints []NodePoolTaint `pulumi:"taints"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	Autoscaling NodePoolAutoscalingPtrInput
	// Name of cluster to create node pool in.
	Cluster pulumi.StringInput
	// Node labels to be applied to the nodes
	Labels pulumi.StringMapInput
	// Name of node pool
	Name pulumi.StringPtrInput
	// Type of nodes for this specific pool, see docs.
	NodeType pulumi.StringInput
	// Desired number of nodes for specific pool.
	Quantity pulumi.IntInput
	// Node taints to be applied to the nodes
	Taints NodePoolTaintArrayInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

// NodePoolArrayInput is an input type that accepts NodePoolArray and NodePoolArrayOutput values.
// You can construct a concrete instance of `NodePoolArrayInput` via:
//
//	NodePoolArray{ NodePoolArgs{...} }
type NodePoolArrayInput interface {
	pulumi.Input

	ToNodePoolArrayOutput() NodePoolArrayOutput
	ToNodePoolArrayOutputWithContext(context.Context) NodePoolArrayOutput
}

type NodePoolArray []NodePoolInput

func (NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (i NodePoolArray) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return i.ToNodePoolArrayOutputWithContext(context.Background())
}

func (i NodePoolArray) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolArrayOutput)
}

// NodePoolMapInput is an input type that accepts NodePoolMap and NodePoolMapOutput values.
// You can construct a concrete instance of `NodePoolMapInput` via:
//
//	NodePoolMap{ "key": NodePoolArgs{...} }
type NodePoolMapInput interface {
	pulumi.Input

	ToNodePoolMapOutput() NodePoolMapOutput
	ToNodePoolMapOutputWithContext(context.Context) NodePoolMapOutput
}

type NodePoolMap map[string]NodePoolInput

func (NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (i NodePoolMap) ToNodePoolMapOutput() NodePoolMapOutput {
	return i.ToNodePoolMapOutputWithContext(context.Background())
}

func (i NodePoolMap) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMapOutput)
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

func (o NodePoolOutput) Autoscaling() NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v *NodePool) NodePoolAutoscalingPtrOutput { return v.Autoscaling }).(NodePoolAutoscalingPtrOutput)
}

// Name of cluster to create node pool in.
func (o NodePoolOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// Node labels to be applied to the nodes
func (o NodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of node pool
func (o NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of nodes for this specific pool, see docs.
func (o NodePoolOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Desired number of nodes for specific pool.
func (o NodePoolOutput) Quantity() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.Quantity }).(pulumi.IntOutput)
}

// Node taints to be applied to the nodes
func (o NodePoolOutput) Taints() NodePoolTaintArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolTaintArrayOutput { return v.Taints }).(NodePoolTaintArrayOutput)
}

type NodePoolArrayOutput struct{ *pulumi.OutputState }

func (NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) Index(i pulumi.IntInput) NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].([]*NodePool)[vs[1].(int)]
	}).(NodePoolOutput)
}

type NodePoolMapOutput struct{ *pulumi.OutputState }

func (NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (o NodePoolMapOutput) ToNodePoolMapOutput() NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) MapIndex(k pulumi.StringInput) NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].(map[string]*NodePool)[vs[1].(string)]
	}).(NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolArrayInput)(nil)).Elem(), NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMapInput)(nil)).Elem(), NodePoolMap{})
	pulumi.RegisterOutputType(NodePoolOutput{})
	pulumi.RegisterOutputType(NodePoolArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMapOutput{})
}
